{"version":3,"file":"static/js/711.37cdd4fa.chunk.js","mappings":"gOAWaA,E,g3jCAJyBC,KAAI,SAACC,GACzC,MAAO,CAAE,KAAQA,EAAQC,QAAS,OAAU,CAACC,WAAWF,EAAQG,UAAUC,QAAQ,GAAGF,WAAWF,EAAQK,WAAWD,QAAQ,IAC5H,I,SCMKE,EAA8BC,OAAOC,QAAQC,EAAAA,GAC/CC,EAAuB,GAuG3B,MArGA,YAAkC,IAAD,IAAZC,KAAAA,OAAY,MAAL,EAAK,EAC/B,GAAsDC,EAAAA,EAAAA,UAAS,IAA/D,eAAOC,EAAP,KAA4BC,EAA5B,MACAC,EAAAA,EAAAA,YAAU,WACRD,EAAuBhB,EACxB,GAAE,IAEH,IAAIkB,EAA0BH,EAAoBd,KAAI,kBAAuB,CAC3EkB,KADoD,EAAGA,KAEvDC,OAFoD,EAASA,OAAT,IAMlDC,EAAsC,IAC1C,WACE,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAA4Be,OAAQD,IACtD,IAD4D,IAAD,WAClDE,GAELhB,EAA4Bc,GAAG,GAAGG,gBAChCP,EAAmBM,GAAGL,KAAKM,eAC5BJ,EAA+BK,MAC9B,SAACC,GAAD,OACEA,EAAMzB,QAAQuB,gBACdP,EAAmBM,GAAGL,KAAKM,aAF7B,KAKFJ,EAA+BO,KAAK,CAClC1B,QAASgB,EAAmBM,GAAGL,KAC/BC,OAAQF,EAAmBM,GAAGJ,OAC9BS,aAAcrB,EAA4Bc,GAAG,IAdQ,EAClDE,EAAI,EAAGA,EAAIN,EAAmBK,OAAQC,IAAM,EAA5CA,EAoBZ,CACDM,GAoBA,IAAMC,EAAeV,EAA+BpB,KAClD,YAA6C,IAA1CC,EAAyC,EAAzCA,QAASkB,EAAgC,EAAhCA,OAAQS,EAAwB,EAAxBA,aACdG,EACe,IAAjBH,EACIA,EAAe,mBAAqB3B,EACpC2B,EAAe,oBAAsB3B,EAC3C,OACE,UAAC+B,EAAA,EAAD,CAAsBC,SAAU,CAACd,EAAO,GAAIA,EAAO,IAAnD,WACE,SAACe,EAAA,EAAD,UAAUH,KACV,SAACI,EAAA,EAAD,UAAQJ,MAFG9B,EAKhB,IAGGmC,EACJzB,EAAgBW,OAAS,EACrB,CAACX,EAAgB,GAAG0B,IAAK1B,EAAgB,GAAG2B,KAC5C,CAAC,WAAY,UAEnB,OACE,gBAAKC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,OAAQ,GAArD,UACE,UAAC,IAAD,CACEN,OAAQA,EACRxB,KAAMA,EACN+B,QAAS,EACTC,QAAS,GACTC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,SAAS,EACTC,cAAe,IAXjB,WAaE,SAACC,EAAA,EAAD,CACEC,YAAY,2EACZC,IAAI,uDAELxB,MAIR,C","sources":["util/CountriesDataFilter.tsx","components/Map.tsx"],"sourcesContent":["import countriesData from '../assets/countries.json';\n\nimport Country from '../interfaces/country';\n\nconst countries: any = countriesData;\n\n// Filter the country data to return only a name and [lat,lng] values\nconst filteredCountryData = countries.map((country: Country) => {\n  return { 'name': country.COUNTRY, 'latlng': [parseFloat(country.latitude).toFixed(1),parseFloat(country.longitude).toFixed(1)] };\n});\n\nexport const countriesWithLatLng = filteredCountryData;","import React, { useEffect, useState } from \"react\"\nimport {\n  MapContainer as LeafletMap,\n  Marker,\n  Popup,\n  TileLayer,\n  Tooltip,\n} from \"react-leaflet\"\n\nimport { countriesWithNumOfDevsObj } from \"../util/UsersDataCleanup\"\nimport { countriesWithLatLng } from \"../util/CountriesDataFilter\"\n\n// Array of country names and number of devs in those countries\n/* Needed to match country names from countriesWithNumOfDevsObj against \ncountry names fetched from API to get their latitude and longitude for markers */\nconst countryNamesAndNumOfDevsArr = Object.entries(countriesWithNumOfDevsObj)\nlet centerLatLngArr: any = []\n\nfunction SimpleMap({ zoom = 3 }) {\n  const [allCountriesLatLang, setAllCountriesLatLang] = useState([])\n  useEffect(() => {\n    setAllCountriesLatLang(countriesWithLatLng)\n  }, [])\n\n  let countriesLatLngArr: any = allCountriesLatLang.map(({ name, latlng }) => ({\n    name,\n    latlng,\n  }))\n\n  // Two nested for loops are okay as array items will always be < 250 in both arrays\n  let finalArrayWithCountryAndLatLng: any = []\n  function finalCountryAndLocationArray() {\n    for (let i = 0; i < countryNamesAndNumOfDevsArr.length; i++) {\n      for (let j = 0; j < countriesLatLngArr.length; j++) {\n        if (\n          countryNamesAndNumOfDevsArr[i][0].toLowerCase() ===\n            countriesLatLngArr[j].name.toLowerCase() &&\n          !finalArrayWithCountryAndLatLng.some(\n            (entry: any) =>\n              entry.country.toLowerCase() ===\n              countriesLatLngArr[j].name.toLowerCase()\n          )\n        ) {\n          finalArrayWithCountryAndLatLng.push({\n            country: countriesLatLngArr[j].name,\n            latlng: countriesLatLngArr[j].latlng,\n            numberOfDevs: countryNamesAndNumOfDevsArr[i][1],\n          })\n        }\n      }\n    }\n\n    return finalArrayWithCountryAndLatLng\n  }\n  finalCountryAndLocationArray()\n\n  // DO NOT DELETE THIS COMMENTED OUT CODE BELOW\n  // Might need it to check for unexpected repeated entries which is easier with sorted countries\n  /*\n  let sorterFunction = finalArrayWithCountryAndLatLng.sort(function(a, b) {\n    var nameA = a.country.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.country.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n  console.log(sorterFunction);\n  */\n\n  const markersArray = finalArrayWithCountryAndLatLng.map(\n    ({ country, latlng, numberOfDevs }: any) => {\n      let numberOfDevsText =\n        numberOfDevs === 1\n          ? numberOfDevs + \" Developer from \" + country\n          : numberOfDevs + \" Developers from \" + country\n      return (\n        <Marker key={country} position={[latlng[0], latlng[1]]}>\n          <Tooltip>{numberOfDevsText}</Tooltip>\n          <Popup>{numberOfDevsText}</Popup>\n        </Marker>\n      )\n    }\n  )\n\n  const center: any =\n    centerLatLngArr.length > 0\n      ? [centerLatLngArr[0].lat, centerLatLngArr[0].lng]\n      : [55.378052, -3.435973]\n\n  return (\n    <div style={{ height: \"90vh\", width: \"100%\", margin: 0 }}>\n      <LeafletMap\n        center={center}\n        zoom={zoom}\n        minZoom={1}\n        maxZoom={10}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {markersArray}\n      </LeafletMap>\n    </div>\n  )\n}\n\nexport default SimpleMap\n"],"names":["countriesWithLatLng","map","country","COUNTRY","parseFloat","latitude","toFixed","longitude","countryNamesAndNumOfDevsArr","Object","entries","countriesWithNumOfDevsObj","centerLatLngArr","zoom","useState","allCountriesLatLang","setAllCountriesLatLang","useEffect","countriesLatLngArr","name","latlng","finalArrayWithCountryAndLatLng","i","length","j","toLowerCase","some","entry","push","numberOfDevs","finalCountryAndLocationArray","markersArray","numberOfDevsText","Marker","position","Tooltip","Popup","center","lat","lng","style","height","width","margin","minZoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","attribution","url"],"sourceRoot":""}